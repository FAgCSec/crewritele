---
import "../styles/perfil.css";
import Layout from "../layouts/Layout.astro";
import Header from "../components/Header.astro";
import Container from "../components/Container.astro";

import { isLoggedIn } from "../utils/auth.js";

const token = Astro.cookies.get("token")?.value;
const [auth, data] = await isLoggedIn(token);

if (auth === false || data === null) return Astro.redirect("/login");

const { userId } = data;
const res = await fetch(`https://localhost:3001/api/usuarios/${userId}`);
const usuarios = await res.json();
---

<Layout>
  <Header />
  <Container>
    {
      usuarios.length === 0 ? (
        <li>No hay usuarios</li>
      ) : (
        usuarios.map((user: any) => {
          const {
            id,
            nombre,
            apellido,
            nombre_usuario,
            correo,
            rol_id,
            ruta_foto_perfil,
            nombre_rol,
          } = user;

          const fotoPerfil = ruta_foto_perfil
            ? `https://localhost:3001/api/usuarios/${id}/foto`
            : "user-placeholder.png";

          return (
            <>
              <h1>Foto de Perfil</h1>
              <div class="foto-perfil-container">
                <img
                  class="foto-perfil"
                  src={fotoPerfil}
                  alt="Foto de perfil"
                  onerror="user-placeholder.png"
                />

                <div style="display: flex; flex-direction: column; gap: 4px">
                  <button data-user-id={userId} id="subir-foto" class="btn">
                    Cambiar Foto
                  </button>
                  <input id="input-foto" type="file" accept="image/*" hidden />
                  <button id="eliminar-foto" class="btn-eliminar">
                    Eliminar Foto
                  </button>
                </div>
              </div>

              <h2>Editar Datos</h2>
              <form id="editarUsuarioForm">
                <label for="nombre">Nombres:</label>
                <input
                  type="text"
                  id="nombre"
                  name="nombre"
                  value={nombre}
                  required
                />

                <label for="apellidos">Apellidos:</label>
                <input
                  type="text"
                  id="apellidos"
                  name="apellidos"
                  value={apellido}
                  required
                />

                <label for="nombre-usuario">Nombre de usuario:</label>
                <input
                  type="text"
                  id="nombre-usuario"
                  name="nombre-usuario"
                  value={nombre_usuario}
                  required
                />

                <label for="email">Correo Electrónico:</label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  value={correo}
                  required
                />

                <button type="submit">Actualizar Datos</button>
              </form>

              <h2>Otras Opciones</h2>
              <div class="otras-opciones">
                {rol_id === 1 && nombre_rol === "Administrador" && (
                  <div id="descargar-db-container">
                    <p>Descargar Base de Datos en Formato SQL</p>
                    <button id="descargar-db" class="btn">
                      Descargar DB
                    </button>
                  </div>
                )}

                <p>Descargar tus Noticias Publicadas en Formato PDF</p>
                <button
                  data-user-id={userId}
                  id="descargar-noticias"
                  class="btn"
                >
                  Descargar Noticias en PDF
                </button>

                <p>Descargar tus Noticias Publicadas en Formato Excel</p>
                <button
                  data-user-id={userId}
                  id="descargar-noticias-excel"
                  class="btn"
                >
                  Descargar Noticias en Excel
                </button>
              </div>
            </>
          );
        })
      )
    }
  </Container>
</Layout>

<script>
  import Swal from "sweetalert2";
  // Subir foto
  const fotoPerfilUsuario = document.querySelector(".foto-perfil") as HTMLImageElement;
  const eliminarFoto = document.getElementById("eliminar-foto");
  const subirFoto = document.getElementById("subir-foto");
  const inputFoto = document.getElementById("input-foto");
  const userId = subirFoto?.getAttribute("data-user-id");

  subirFoto?.addEventListener("click", () => {
    inputFoto?.click();
  });

  inputFoto?.addEventListener("change", async (e : any) => {
    const formData = new FormData();
    formData.append("fotoPerfil", e.target.files[0]);

    // Convertir la imagen a base64
    const reader = new FileReader();
    reader.readAsDataURL(e.target.files[0]);
    reader.onload = async function () {
      if (reader.result === null || typeof reader.result !== "string") return;
      
      fotoPerfilUsuario.src = reader.result;
    };

    // Subir la imagen al servidor
    try {
      const response = await fetch(
        `https://localhost:3001/api/usuarios/${userId}/foto`,
        {
          method: "POST",
          body: formData,
        }
      );

      if (response.ok) {
        Swal.fire({
          position: "top-end",
          icon: "success",
          title: "Foto de perfil actualizada exitosamente",
          showConfirmButton: false,
          timer: 1500,
        });
      } else {
        const error = await response.json();
        fotoPerfilUsuario.src = "/user-placeholder.png";

        Swal.fire({
          position: "top-end",
          icon: "error",
          title: `Error: ${error.error || "No se pudo subir la foto de perfil"}`,
          showConfirmButton: false,
          timer: 2000,
        });
      }
    } catch (error) {
      console.error("Error al subir la foto de perfil:", error);

      Swal.fire({
        position: "top-end",
        icon: "error",
        title: "Ocurrió un error al subir la foto de perfil",
        showConfirmButton: false,
        timer: 2000,
      });
    }
  });

  // Eliminar foto de perfil
  eliminarFoto?.addEventListener("click", async () => {
    if (fotoPerfilUsuario.src.includes("/user-placeholder.png")) {
      return;
    }

    Swal.fire({
      customClass: {
        confirmButton: "button-eliminar",
      },
      title: "¿Estás seguro de que deseas eliminar la foto de perfil?",
      showCancelButton: true,
      confirmButtonText: "Si, eliminar",
      reverseButtons: true,
    }).then(async (result) => {
      if (!result.isConfirmed) return;

      try {
        const response = await fetch(
          `https://localhost:3001/api/usuarios/${userId}/foto`,
          {
            method: "DELETE",
          }
        );

        if (response.ok) {
          Swal.fire({
            position: "top-end",
            icon: "success",
            title: "Foto de perfil eliminada exitosamente",
            showConfirmButton: false,
            timer: 1500,
          });

          fotoPerfilUsuario.src = "/user-placeholder.png";
        } else {
          const error = await response.json();

          Swal.fire({
            position: "top-end",
            icon: "error",
            title: `Error: ${error.error || "No se pudo eliminar la foto de perfil"}`,
            showConfirmButton: false,
            timer: 2000,
          });
        }
      } catch (error) {
        console.error("Error al eliminar la foto de perfil:", error);

        Swal.fire({
          position: "top-end",
          icon: "error",
          title: "Ocurrió un error al eliminar la foto de perfil",
          showConfirmButton: false,
          timer: 2000,
        });
      }
    });
  });

  // Editar usuario
  document
    .getElementById("editarUsuarioForm")
    ?.addEventListener("submit", async function (event: Event) {
      event.preventDefault();

      const nombre = document.getElementById("nombre") as HTMLInputElement;
      const apellidos = document.getElementById("apellidos") as HTMLInputElement;
      const nombre_usuario = document.getElementById("nombre-usuario") as HTMLInputElement;
      const email = document.getElementById("email") as HTMLInputElement;

      try {
        const response = await fetch(
          `https://localhost:3001/api/usuarios/${userId}`,
          {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              nombre: nombre?.value,
              apellidos: apellidos?.value,
              nombre_usuario: nombre_usuario?.value,
              email: email?.value,
            }),
          }
        );

        if (response.ok) {
          Swal.fire({
            position: "top-end",
            icon: "success",
            title: "Datos actualizados exitosamente",
            showConfirmButton: false,
            timer: 1500,
          });
        } else {
          const error = await response.json();

          Swal.fire({
            position: "top-end",
            icon: "error",
            title: `Error: ${error.error || "No se pudo editar los datos el usuario"}`,
            showConfirmButton: false,
            timer: 2000,
          });
        }
      } catch (error) {
        console.error("Error al editar los datos:", error);

        Swal.fire({
          position: "top-end",
          icon: "error",
          title: "Ocurrió un error al editar los datos del usuario",
          showConfirmButton: false,
          timer: 2000,
        });
      }
    });

  // Descargar base de datos en formato SQL
  document.getElementById("descargar-db")?.addEventListener("click", () => {
    window.location.href = "https://localhost:3001/api/descargar-db";
  });

  // Descargar noticias en formato PDF
  const btnDescargarPdf = document.getElementById("descargar-noticias");
  btnDescargarPdf?.addEventListener("click", () => {
    const userId = btnDescargarPdf.getAttribute("data-user-id");
    window.location.href = `https://localhost:3001/api/descargar-pdf/${userId}`;
  });

  // Descargar noticias en formato Excel
  const btnDescargarExcel = document.getElementById("descargar-noticias-excel");
  btnDescargarExcel?.addEventListener("click", () => {
    const userId = btnDescargarExcel.getAttribute("data-user-id");
    window.location.href = `https://localhost:3001/api/descargar-excel/${userId}`;
  });
</script>
